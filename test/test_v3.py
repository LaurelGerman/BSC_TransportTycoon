# For the Bonus challenge: DO NOT EDIT THIS FILE
# Treat your solution as though it needs to
# preserve backwards compatibility with the
# behaviors described here.
from tycoon.v3 import last_delivery_time, get_ship_travel_time
import unittest
import pytest

class LastDeliveryTimeTestV3(unittest.TestCase):
    def test_schedule(self):
        schedules = [
            # Part 2 schedules
            # (6, "A"),
            # (14, "AA"), #2 trucks go to port = 1hr; boat goes 4hr out, 4hr back, 4hr back ==12+1==13
            # (14, "AAB"),#Above, and a second entry of 5hr which finishes before AA; max == 13.
            # (6, "AB"),  #1 truck to A=1 + boat 4 == 5; boat to B == 5.
            # (9, "ABB"),
            # (16, "BBA"),
            # (24, "BBAA"),
            # Part 3 schedules
            (6,"A"),
            (6,"AA"),
            (9,"AAB"),
            (6,"AB"),
            (14,"ABA"),
            (9,"ABB"),
            (16,"BBA"),
            (16,"BBAA")
        ]
        for expected_time, container_schedule in schedules:
            with self.subTest(container_schedule):
                self.assertEqual(
                    expected_time,
                    last_delivery_time(
                        container_schedule
                    ),
                    "container schedule === %s" % container_schedule
                )

@pytest.mark.parametrize("input, output", [
    ([4], 12),
    #([4, 4], 12),
    ([4, 5], 24),
])
def test_get_ship_travel_time(input, output):
    assert get_ship_travel_time(input) == output


if __name__ == '__main__':
    unittest.main()
